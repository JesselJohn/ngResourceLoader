'use strict';

/*!
 * Jessel John - May, 04, 2014
 * MIT Licence
 */
! function(window, document, undefined) {
    angular.module('ng.resourceloader',[])
        .directive('ngLazyLoadImg', ['$window', '$timeout', function($window, $timeout) {
            var objOfOnLoadImgElems = {},
                objOfLazyImgElems = {},
                loadTimeoutId,
                scrollTimeoutId,
                resizeTimeoutId,
                ngLazyLoadImg = {
                    scope: {
                        'defaultImage': '=?',
                        'imgsrc': '=',
                        'onWinLoad': '=?'
                    },
                    replace: true,
                    template: function(elem, attrs) {
                        return attrs.elemType == 'img' ?
                            '<img class="ty-async-img" ng-src="{{tyShow.imgsrc}}" ng-class="{\'loaded\':loaded}"></img>' :
                            '<div class="ty-async-img" ng-style="{\'background-image\':\'url(\'+tyShow.imgsrc+\')\'}" ng-class="{\'loaded\':loaded}"></div>';
                    },
                    restrict: 'E',
                    controllerAs: 'tyShow',
                    controller: ['$scope', '$element',
                        function($scope, $element) {
                            var that = this,
                                $elementOffsetTop = $element[0].getBoundingClientRect().top;

                            function populateLazyElemsFn(obj) {
                                if (obj[$elementOffsetTop] === undefined) {
                                    obj[$elementOffsetTop] = [];
                                }
                                obj[$elementOffsetTop].push({
                                    'that': that,
                                    'scope': $scope,
                                    'elem': $element
                                });
                            }

                            !$scope.onWinLoad ?
                                populateLazyElemsFn(objOfLazyImgElems) :
                                populateLazyElemsFn(objOfOnLoadImgElems);

                            $timeout.cancel(loadTimeoutId);
                            loadTimeoutId = $timeout(executeWhenAllLoaded, 300);
                        }
                    ],
                    link: function postLink(scope, element, attrs) {}
                };

            function setImageIfInViewportFn(obj, forceLoad) {
                var doc = document.documentElement,
                    $windowScrollTop = ($window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0),
                    $windowHeight = window.outerHeight;
                for (var a in obj) {
                    var eachBlock = obj[a];
                    if (forceLoad || parseInt(a, 10) < $windowScrollTop + $windowHeight) {
                        for (var i = 0, len = eachBlock.length; i < len; i++) {
                            var img = document.createElement('img');
                            img.src = eachBlock[i].scope.imgsrc;
                            img.onload = function(eachElem) {
                                return function() {
                                    eachElem.that.imgsrc = eachElem.scope.imgsrc;
                                    eachElem.scope.loaded = true;
                                    eachElem.scope.$digest();
                                }
                            }(eachBlock[i]);
                        }
                        delete obj[a];
                    }
                }
            }

            function executeWhenAllLoaded() {
                setImageIfInViewportFn(objOfOnLoadImgElems, true);
                setImageIfInViewportFn(objOfLazyImgElems, false);
            }

            window.addEventListener('scroll', function() {
                $timeout.cancel(scrollTimeoutId);
                scrollTimeoutId = $timeout(function() {
                    setImageIfInViewportFn(objOfLazyImgElems, false);
                }, 300);
            }, false);

            window.addEventListener('resize', function() {
                $timeout.cancel(resizeTimeoutId);
                resizeTimeoutId = $timeout(function() {
                    var lazyObjCopy = objOfLazyImgElems;
                    objOfLazyImgElems = {};

                    for (var a in lazyObjCopy) {
                        var eachObj = lazyObjCopy[a];
                        for (var i = 0, len = eachObj.length; i < len; i++) {
                            var eachElem = eachObj[i],
                                $elementOffsetTop = eachElem.elem[0].getBoundingClientRect().top;
                            if (objOfLazyImgElems[$elementOffsetTop] === undefined) {
                                objOfLazyImgElems[$elementOffsetTop] = [];
                            }

                            objOfLazyImgElems[$elementOffsetTop].push({
                                'that': eachElem.that,
                                'scope': eachElem.scope,
                                'elem': eachElem.elem
                            });
                        }
                    }

                    setImageIfInViewportFn(objOfLazyImgElems, false);
                }, 300);
            }, false);

            return ngLazyLoadImg;
        }]);
}(window, document);

